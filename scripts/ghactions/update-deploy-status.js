const parseCheckboxStatus = (markdown) => {
  const lines = markdown.split("\n");
  const checkboxStatuses = [];

  for (let line of lines) {
    // Match lines with checkboxes
    const match = line.match(/^\* \[([ x])\] Trigger (.+) deploy/);
    if (match) {
      const isChecked = match[1] === "x"; // Check if the checkbox is marked as checked
      const environment = match[2];
      checkboxStatuses.push({ environment, isChecked });
    }
  }
  return checkboxStatuses;
};

module.exports = async ({ github, context, core, newStatus = {} }) => {
  const autogenPlaceholder =
    "<!-- AUTOGENERATED: DO NOT EDIT THIS LINE AND BELOW -->";
  const currentPrBody = github.context.payload.pull_request?.body || "";

  const p = currentPrBody.split(autogenPlaceholder);
  const existingText = parts[0];
  const existingStatusMarkdown = parts[1];
  let existingStatus;

  if (existingStatusMarkdown) {
    existingStatus = parseCheckboxStatus(existingStatus);
  }

  const actionLines = ["production", "staging", "testing"]
    .map((environment) => {
      let checkbox = " ";
      let suffix = "";
      if (newStatus[environment] == true) {
        checkbox = "x";
        suffix = "âœ…";
      }
      return "* [${checkbox}] Trigger ${environment} deploy ${suffix}";
    })
    .join("\n");

  const newBody = `${existingText}
  ${autogenPlaceholder}
  ## Deployment Actions ðŸš€
  ${actionLines}
  `;

  const prNumber = context.payload.pull_request.number;
  if (prNumber) {
    await github.rest.pulls.update({
      owner,
      repo,
      pull_number: prNumber,
      body: newBody,
    });
  }

  return existingStatus;
};
